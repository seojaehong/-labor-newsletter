# 워크플로우 이름
name: Daily Labor Newsletter

# 워크플로우 실행 트리거 설정
on:
  schedule:
    - cron: '0 22 * * *' # 매일 아침 7시 (한국시간 기준)

  workflow_dispatch:

# 작업(Job) 정의
jobs:
  run-newsletter:
    runs-on: ubuntu-latest

    # GitHub Actions 봇(GITHUB_TOKEN)에게 권한 부여
    # 수동 Git 명령 사용 시 필요합니다.
    permissions: # <-- 이 블록 유지
      contents: write # <-- 쓰기 권한 유지

    # 작업(Job)이 수행할 단계(Steps)들
    steps:
      # 1. GitHub 리포지토리 코드 체크아웃
      - name: 체크아웃 저장소
        uses: actions/checkout@v4

      # 2. Python 환경 설정
      - name: Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. 의존성 라이브러리 설치
      - name: 패키지 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # requirements.txt에 필요한 패키지 모두 포함되어 있어야 함

      # 4. Python 스크립트 실행
      # 스크립트의 표준 출력은 newsletter.txt로, 표준 에러는 error.log로 리다이렉션됩니다.
      - name: 뉴스레터 실행 (메일 발송 포함)
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          # 스크립트 실행 및 출력 리다이렉션
          # 이제 이 스텝은 newsletter.txt와 error.log 파일을 성공적으로 생성/수정할 것입니다.
          python main.py > newsletter.txt 2> error.log

      # 4.5 생성된 뉴스레터 파일(newsletter.txt) 아티팩트 업로드 (디버깅/확인용)
      # 스크립트 실행 결과를 확인하기 위함입니다.
      - name: 생성된 뉴스레터 파일 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: generated-newsletter
          path: newsletter.txt
          if-no-files-found: ignore

      # 4.6 실행 중 발생한 에러 로그 파일 아티팩트 업로드 (디버깅용)
      # 스크립트 실행 중 표준 에러로 출력된 내용을 확인하기 위함입니다.
      - name: 에러 로그 파일 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: error-log
          path: error.log
          if-no-files-found: ignore


      # 5. 생성된 결과물 커밋 및 푸시 (수동 Git 명령 사용)
      # 이전의 자동 커밋 Action 스텝을 이 스텝으로 교체합니다.
      - name: 결과물 커밋 및 푸시
        run: |
          # Git 커밋 사용자 정보 설정
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # 변경된 파일 (newsletter.txt, error.log) Git에 추가 (Stage)
          git add newsletter.txt error.log # <-- error.log 도 함께 추가

          # 변경사항이 있는지 확인하고, 있다면 커밋 실행
          # 'git commit' 명령이 변경사항이 없을 경우 실패하므로,
          # || 를 사용하여 실패 시 메시지 출력 후 스텝을 성공으로 종료시킵니다.
          git commit -m "뉴스레터 자동 업데이트 - $(date +'%Y-%m-%d')" || { echo "No changes to commit. Skipping push."; exit 0; }
          # Note: 커밋할 변경사항이 없으면 여기서 스텝이 성공적으로 종료되고 푸시를 건너뜁니다.

          # --- Git 충돌 처리 로직 ---
          # 원격 저장소에서 최신 변경사항을 가져와서 현재 커밋 위에 덧붙입니다 (Rebase).
          # 이렇게 하면 푸시 시 충돌 가능성이 줄어듭니다.
          # 이 스텝은 커밋이 성공한 후에만 실행됩니다.
          git pull origin main --rebase # <-- git pull 명령이 이제 커밋 이후에 실행됩니다.

          # 변경사항을 원격 리포지토리로 푸시
          # rebase 성공 후에는 보통 푸시가 성공합니다.
          git push origin main

          echo "Commit and push step completed." # 성공 메시지 출력
