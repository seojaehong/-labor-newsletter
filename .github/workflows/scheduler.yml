# 워크플로우 이름
name: Daily Labor Newsletter

# 워크플로우 실행 트리거 설정
on:
  schedule:
    - cron: '0 22 * * *' # 매일 아침 7시 (한국시간 기준)

  workflow_dispatch: # 수동 실행 버튼

# 작업(Job) 정의
jobs:
  run-newsletter: # 작업 ID
    runs-on: ubuntu-latest # 실행 환경

    # GitHub Actions 봇(GITHUB_TOKEN)에게 권한 부여
    # Git 커밋 및 푸시를 위해 필요합니다.
    permissions: # <--- 권한 블록 (이전에 추가됨, 초기 YML에는 없었음)
      contents: write # <--- 리포지토리 콘텐츠 쓰기 권한

    # 작업(Job)의 단계(Steps)들
    steps:
      # 1. GitHub 리포지토리 코드 체크아웃
      - name: 체크아웃 저장소
        uses: actions/checkout@v4

      # 2. Python 환경 설정
      - name: Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # 사용할 Python 버전

      # 3. 의존성 라이브러리 설치
      - name: 패키지 설치
        run: |
          python -m pip install --upgrade pip
          # requirements.txt에 필요한 패키지 모두 포함되어 있어야 함
          # (feedparser, beautifulsoup4, google-generativeai, pytz)
          pip install -r requirements.txt

      # 4. Python 스크립트 실행
      # 스크립트의 표준 출력은 newsletter.txt로, 표준 에러는 error.log로 리다이렉션됩니다.
      # main.py 파일은 복잡한 스크립트 코드여야 합니다.
      - name: 뉴스레터 실행 (메일 발송 포함)
        env: # <--- 환경 변수 설정 (이제 Gemini 키 사용)
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }} # <--- 수정됨 (초기 YML은 Anthropic 키 사용)
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          # 순수 Python 실행 + 출력/에러 리다이렉션 설정
          # Standard Output을 newsletter.txt로, Standard Error를 error.log로
          python main.py > newsletter.txt 2> error.log
        # shell: /usr/bin/bash -e {0} # 기본 Bash 쉘 사용

      # 4.5 생성된 뉴스레터 파일(newsletter.txt) 아티팩트 업로드 (확인용)
      - name: 생성된 뉴스레터 파일 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: generated-newsletter
          path: newsletter.txt
          if-no-files-found: ignore # 파일이 없어도 무시

      # 4.6 실행 중 발생한 에러 로그 파일 아티팩트 업로드 (디버깅용)
      - name: 에러 로그 파일 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: error-log
          path: error.log
          if-no-files-found: ignore # 파일이 없어도 무시


      # 5. 생성된 결과물 커밋 및 푸시 (수동 Git 명령 사용)
      # 사용자의 초기 YML을 기반으로 Git 스텝을 재구성하되, 필요한 수정사항 포함
      - name: 결과물 커밋 및 푸시
        run: |
          # Git 커밋 사용자 정보 설정
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # --- 초기 YML과의 차이점 ---
          # Git Add를 Commit Check 이전에 수행합니다.
          # error.log 파일도 커밋 대상에 포함합니다.
          git add newsletter.txt error.log # <--- newsletter.txt 와 error.log 추가 (초기 YML은 newsletter.txt만)

          # 변경사항이 있는지 확인하고, 있다면 커밋 실행
          # 초기 YML의 commit ... || echo ... 부분과 유사하지만,
          # 변경사항이 없을 경우 스텝을 성공으로 종료시키도록 exit 0를 명시적으로 추가했습니다.
          git commit -m "뉴스레터 자동 업데이트 - $(date +'%Y-%m-%d')" || { echo "No changes to commit. Skipping push."; exit 0; }
          # Note: 커밋할 변경사항이 없으면 여기서 스텝이 성공적으로 종료되고 푸시를 건너뜁니다.

          # --- Git 충돌 처리 로직 ---
          # 원격 저장소에서 최신 변경사항을 가져와서 현재 커밋 위에 덧붙입니다 (Rebase).
          # 초기 YML에서도 이 명령어가 있었으나, 이제 커밋 성공 후에 실행됩니다.
          git pull origin main --rebase # <--- git pull 명령 (초기 YML에 있었음)

          # 변경사항을 원격 리포지토리로 푸시
          git push origin main # <--- git push 명령 (초기 YML에 있었음)

          echo "Commit and push step completed." # 성공 메시지 출력
        # shell: /usr/bin/bash -e {0} # 기본 Bash 쉘 사용 가능
